# Implementazione Autenticazione Next.js
# ====================================

# 1. middleware.ts
# ----------------
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // Se stiamo già sulla pagina di login, non fare nulla
  if (request.nextUrl.pathname === '/login') {
    return NextResponse.next()
  }

  // Se non c'è il token nel localStorage, reindirizza al login
  const token = request.cookies.get('auth_token')
  if (!token) {
    return NextResponse.redirect(new URL('/login', request.url))
  }

  return NextResponse.next()
}

// Configurazione delle route da proteggere
export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico|login).*)',
  ],
}

# 2. pages/login.js
# ----------------
import { useState } from 'react';
import styles from '../components/Login.module.css';

export default function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleLogin = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError(null);

    try {
      // Caso speciale per admin/admin
      if (email === 'admin' && password === 'admin') {
        // Impostiamo un cookie di autenticazione
        document.cookie = 'auth_token=admin; path=/; max-age=3600'; // 1 ora
        // Reindirizzamento diretto
        window.location.href = '/';
        return;
      }

      setError('Credenziali non valide');
    } catch (error) {
      setError(error.message);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className={styles.loginContainer}>
      <div className={styles.loginBox}>
        <h1 className={styles.title}>Nome App</h1>
        <form onSubmit={handleLogin} className={styles.form}>
          <div className={styles.inputGroup}>
            <label htmlFor="email">Email</label>
            <input
              id="email"
              type="text"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              className={styles.input}
              disabled={isSubmitting}
              placeholder="Inserisci 'admin'"
            />
          </div>
          <div className={styles.inputGroup}>
            <label htmlFor="password">Password</label>
            <input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              className={styles.input}
              disabled={isSubmitting}
              placeholder="Inserisci 'admin'"
            />
          </div>
          {error && <div className={styles.error}>{error}</div>}
          <button 
            type="submit" 
            className={styles.button}
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Accesso in corso...' : 'Accedi'}
          </button>
        </form>
      </div>
    </div>
  );
}

# 3. components/Login.module.css
# ----------------------------
.loginContainer {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #f5f5f5;
}

.loginBox {
  background: white;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 400px;
}

.title {
  text-align: center;
  color: #333;
  margin-bottom: 2rem;
}

.form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.inputGroup {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.input {
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
}

.button {
  background-color: #0070f3;
  color: white;
  padding: 0.75rem;
  border: none;
  border-radius: 4px;
  font-size: 1rem;
  cursor: pointer;
}

.error {
  color: #ff0000;
  text-align: center;
}

# 4. pages/_app.js
# ---------------
function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />;
}

export default MyApp;

# 5. components/MenuBar.js (per il logout)
# --------------------------------------
function MenuBar() {
  const handleLogout = () => {
    document.cookie = 'auth_token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';
    window.location.href = '/login';
  };

  return (
    <nav>
      <button onClick={handleLogout}>Logout</button>
    </nav>
  );
}

# ISTRUZIONI PER L'IMPLEMENTAZIONE
# ===============================
# 1. Crea la struttura delle cartelle:
#    - pages/
#      - login.js
#      - _app.js
#    - components/
#      - Login.module.css
#      - MenuBar.js
#    - middleware.ts
#
# 2. Copia ogni file nella sua posizione corretta
#
# 3. Modifica i nomi e gli stili come necessario
#
# 4. Assicurati che il middleware sia configurato correttamente
#
# 5. Testa il flusso di login/logout
#
# NOTE:
# - Il sistema usa un semplice cookie per l'autenticazione
# - Le credenziali di default sono admin/admin
# - Il token scade dopo 1 ora
# - Tutte le route sono protette tranne /login 